/**
 * @module cmake_generator
 * @description This module contains the logic to generate a CMakeLists.txt file
 */

import { PathLike } from "fs";
import { type } from "os";


/**
 * Represents the type of library to be generated by the CMake generator.
 * @enum {string}
 */
export enum LibraryType {
    static = "STATIC",
    shared = "SHARED",
    object = "OBJECT",
    interface = "INTERFACE"
}

/**
 * Enum representing the different visibility levels for CMake targets.
 * @enum {string}
 */
export enum CMakeVisibility {
    private = "PRIVATE",
    public = "PUBLIC",
    interface = "INTERFACE"
}

/**
 * Enum representing the type of source file.
 */
export enum SourceType {
    regular,  // Regular source files like .cpp, .c, etc.
    header,   // Header files, primarily for C and C++.
    cxxModule // Experimental C++ Modules, only if you wish to support them.
}

/**
 * Represents a source file with its name and path.
 * @typedef {Object} SourceFile
 * @property {string} name - The name of the source file.
 * @property {PathLike} path - The path to the source file.
 */
export type SourceFile = {
    name: string;
    path: PathLike;
};

/**
 * Represents a collection of source files with a common type and visibility.
 * @typedef {Object} Sources
 * @property {SourceFile[]} files - An array of source files.
 * @property {SourceType} type - The type of source files.
 */
export type Sources = {
    files: SourceFile[];
    type: SourceType;
    visibility: CMakeVisibility;
};

/**
 * Represents a set of include directories to be used in a CMake project.
 * @typedef {Object} IncludeDirectories
 * @property {PathLike[]} directories - An array of paths to include directories.
 * @property {CMakeVisibility} visibility - The visibility of the include directories.
 * @property {PathLike} [buildInterface] - An optional path to a build interface file.
 * @property {PathLike} [installInterface] - An optional path to an install interface file.
 */
export type IncludeDirectories = {
    directories: PathLike[];
    visibility: CMakeVisibility;
    buildInterface?: PathLike;
    installInterface?: PathLike;
};

/**
 * Represents a set of libraries to be linked with a CMake target, along with their visibility.
 * @typedef {Object} LinkLibraries
 * @property {string[]} libraries - An array of library names to link.
 * @property {CMakeVisibility} visibility - The visibility of the link libraries.
 */
export type LinkLibraries = {
    libraries: string[];
    visibility: CMakeVisibility;
};

/**
 * Represents the configuration for installing header files
 * @typedef {Object} InstallHeaders
 * @property {PathLike[]} headers - An array of paths to header files.
 * @property {PathLike} destination - The destination to install the header files to, relative to the install location
 */
export type InstallFiles = {
    files: PathLike[];
    destination: PathLike;
};


/**
 * Configuration options for installing a library or package.
 * @typedef {Object} InstallConfig
 * @property {PathLike} [headerDestination] - The destination to install header files to, relative to the install location.
 * @property {PathLike} [libraryDestination] - The destination to install library files to, relative to the install location.
 * @property {InstallFiles} [files] - Any other files to install
 */
export type InstallConfig = {
    headerDestination?: PathLike;
    libraryDestination?: PathLike;
    files?: InstallFiles;
};

/**
 * Definition of a library.
 * @typedef {Object} LibraryDef
 * @property {string} name - The name of the library.
 * @property {LibraryType} type - The type of library.
 */
export type LibraryDef = {
    name: string;
    type: LibraryType;
};

/**
 * Represents a library with its configuration, source files, and optional include directories, link libraries, and installation configuration.
 * This is the primary public interface of this module.
 * @typedef {Object} Library
 * @property {LibraryDef} config - The configuration of the library.
 * @property {Sources[]} sources - The sources of the library.
 * @property {IncludeDirectories} [includeDirectories] - The include directories of the library.
 * @property {LinkLibraries} [linkLibraries] - The link libraries of the library.
 * @property {InstallConfig} [installConfig] - The installation configuration of the library.
 */
export type Library = {
    config: LibraryDef;
    sources: Sources[];
    includeDirectories?: IncludeDirectories[];
    linkLibraries?: LinkLibraries[];
    installConfig?: InstallConfig;
};

/**
 * Adds a library to the CMake project.
 * @param library - The definition of the library to add.
 * @returns string - A CMake command to add the library.
 */
function addLibrary(library: LibraryDef) {
    return `add_library(${library.name} ${library.type})\n`;
}

/**
 * Adds sources to a CMake library target.
 * @param library - The CMake library target to add sources to.
 * @param sources - The sources to add to the library target.
 * @returns string - A CMake command string to add the sources to the library target.
 */
function targetSources(library: LibraryDef, sources: Sources) {
    let cmakeCommand = "";
    switch (sources.type) {
        // Regular source files like .cpp, .c, etc.
        case SourceType.regular:
            cmakeCommand = `target_sources(${library.name} ${sources.visibility} ${sources.files.map((file) => file.path).join(" ")})\n`;
            break;
        // Header files, create a HEADERS FILE_SET
        case SourceType.header:
            cmakeCommand = `target_sources(${library.name} ${sources.visibility} FILE_SET HEADERS FILES ${sources.files.map((file) => file.path).join(" ")})\n`;
            break;
        // Experimental C++ Modules
        case SourceType.cxxModule:
            cmakeCommand = `target_sources(${library.name} ${sources.visibility} FILE_SET CXX_MODULES FILES ${sources.files.map((file) => file.path).join(" ")})\n`;
            break;
        default:
            console.error(`Unknown source type: ${sources.type}`);
            break;
    }
    return cmakeCommand;
}

/**
 * Adds include directories to a library target in CMake.
 * @param library - The library target to add include directories to.
 * @param includeDirectories - The include directories to add.
 * @returns string - The CMake command to add the include directories.
 */
function targetIncludeDirectories(library: LibraryDef, includeDirectories: IncludeDirectories) {
    let cmakeCommand = `target_include_directories(${library.name} ${includeDirectories.visibility}`;
    if (includeDirectories.buildInterface) {
        cmakeCommand += ` $<BUILD_INTERFACE:${includeDirectories.buildInterface}>`;
    }
    if (includeDirectories.installInterface) {
        cmakeCommand += ` $<INSTALL_INTERFACE:${includeDirectories.installInterface}>`;
    }
    cmakeCommand += `)\n`;
    return cmakeCommand;
}

/**
 * Adds link libraries to a library definition.
 * @param library - The library definition to add link libraries to.
 * @param linkLibraries - The link libraries to add.
 * @returns string - The CMake command to add the link libraries to the library definition.
 */
function targetLinkLibraries(library: LibraryDef, linkLibraries: LinkLibraries) {
    return `target_link_libraries(${library.name} ${linkLibraries.visibility} ${linkLibraries.libraries.join(" ")})\n`;
}

/**
 * Returns a CMake target_compile_definitions command for the given library and definitions.
 * @param library - The library definition object.
 * @param definitions - An array of compile definitions to add to the target.
 * @returns The CMake target_compile_definitions command as a string.
 */
function targetCompileDefinitions(library: LibraryDef, definitions: string[]) {
    return `target_compile_definitions(${library.name} ${definitions.join(" ")})\n`;
}


/**
 * Generates a CMake command to install a library target along with its headers and library files.
 * @param library - The library definition object.
 * @param installConfig - The installation configuration object.
 * @returns The CMake command as a string.
 */
function targetInstall(library: LibraryDef, installConfig: InstallConfig) {
    // If headers are provided, target_sources will be called with the FILE SET HEADERS option
    let cmakeCommand = "";
    
    // if(installConfig.installHeaders) {
    //     cmakeCommand += `target_sources(${library.name} ${installConfig.headers.headers.map((header) => header).join(" ")})\n`;
    // }

    cmakeCommand += `install(TARGETS ${library.name} EXPORT ${library.name}Targets`;
    if (installConfig.headerDestination) {
        cmakeCommand += ` FILE_SET HEADERS DESTINATION ${installConfig.headerDestination}`;
    }
    if (installConfig.libraryDestination) {
        cmakeCommand += ` LIBRARY DESTINATION ${installConfig.libraryDestination}`;
    }
    cmakeCommand += `)\n`;
    return cmakeCommand;
}


/**
 * Creates a CMake library target.
 * @param library - The library configuration to create.
 * @returns string - The CMake command to create the library target.
 */
export function createLibrary(library: Library) {
    let cmakeCommand = "";
    
    // Add the library to the project
    cmakeCommand += addLibrary(library.config);

    // Add sources to the library
    if(library.sources) {
        // Add sources to the library
        for (const sources of library.sources) {
            cmakeCommand += targetSources(library.config, sources);
        }
    }

    // Add include directories to the library
    if(library.includeDirectories) {
        for (const includeDirectory of library.includeDirectories) {
            cmakeCommand += targetIncludeDirectories(library.config, includeDirectory);
        }        
    }

    // Add link libraries to the library
    if(library.linkLibraries) {
        for (const linkLibrary of library.linkLibraries) {
            cmakeCommand += targetLinkLibraries(library.config, linkLibrary);
        }
    }

    // Add install configuration to the library
    if(library.installConfig) {
        cmakeCommand += targetInstall(library.config, library.installConfig);
    }

    return cmakeCommand;
}
